initSidebarItems({"fn":[["create_account","Create a registered client. This or any one of the other companion functions to get a client must be called before initiating any operation allowed by this crate. `client_handle` is a pointer to a pointer and must point to a valid pointer not junk, else the consequences are undefined."],["create_unregistered_client","Create an unregistered client. This or any one of the other companion functions to get a client must be called before initiating any operation allowed by this crate."],["drop_client","Discard and clean up the previously allocated client. Use this only if the client is obtained from one of the client obtainment functions in this crate (`crate_account`, `log_in`, `create_unregistered_client`). Using `client_handle` after a call to this functions is undefined behaviour."],["drop_null_ptr","Drop the null pointer returned as error from the execute_for_content fn"],["drop_vector","Drop the vector returned as a result of the execute_for_content fn"],["execute","General function that can be invoked for performing a API specific operation that will return only result to indicate whether the operation was successful or not. This function would only perform the operation and return 0 or error code c_payload refers to the JSON payload that can be passed as a JSON string. The JSON string should have keys module, action, app_root_dir_key, safe_drive_dir_key, safe_drive_access and data. `data` refers to API specific payload."],["execute_for_content","General function that can be invoked for getting data as a resut for an operation. The function return a pointer to a U8 vecotr. The size of the U8 vector and its capacity is written to the out params c_size & c_capacity. The size and capcity would be required for droping the vector The result of the execution is returned in the c_result out param"],["get_app_dir_key","Returns key size"],["get_safe_drive_key","Returns Key as base64 string"],["log_in","Log into a registered client. This or any one of the other companion functions to get a client must be called before initiating any operation allowed by this crate. `client_handle` is a pointer to a pointer and must point to a valid pointer not junk, else the consequences are undefined."]],"macro":[["parse_result!","This macro is intended to be used in all cases where we get an Err out of Result<T, U> and want to package it into `safe_ffi::errors::FfiError::SpecificParseError(String)`. This is useful because there may be miscellaneous erros while parsing through a valid JSON due to JSON not conforming to certain mandatory requirements. This can then be communicated back to the JSON sending client."]],"mod":[["errors","Errors thrown by the FFI operations"]],"struct":[["ParameterPacket","ParameterPacket acts as a holder for the standard parameters that would be needed for performing operations across the modules like nfs and dns"]],"trait":[["Action","ICommand trait"]],"type":[["ResponseType","ResponseType tspecifies the standard Response that is to be expected from the ::Action trait"]]});